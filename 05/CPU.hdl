// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
   // Put your code here:

    /* Incoming instructions: */

    Not(in = instruction[15], out = AInstruction);

    /* 
     * loadA asserted if we have an A-Instruction or a C-Instruction is routed
     * from the ALU.  A C-instruction's destination is RegA from the ALU if d1
     * is asserted 
     */
    Or(a = AInstruction, b = instruction[5], out = loadA);
    Mux16(a = aluOut, b = instruction, sel = AInstruction, out = ARegisterIn);
    ARegister(in = ARegisterIn, load = loadA, out = ARegisterOut,
                                              out[0..14] = addressM);

    /* ALU inputs */

    /* 
     * loadD asserted if we have a C-Instruction whose destination is register D
     * that is, d2 is asserted 
     */
    And(a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = aluOut, load = loadD, out=DRegisterOut);

    /* Whether to combine D with M|A is specified by instruction[12] */
    Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = ALUin); 

    ALU(
        x  = DRegisterOut, 
        y  = ALUin, 
        zx = instruction[11], 
        nx = instruction[10], 
        zy = instruction[9], 
        ny = instruction[8], 
        f  = instruction[7], 
        no = instruction[6], 
        out = aluOut, out = outM,
        zr = zroOut, 
        ng = negOut
    );

    /* Write to M on C-Instruction whenever d3 is asserted */
    And(a = instruction[15], b = instruction[3], out = writeM);

    /* Jump logic */

    Or(a=zroOut, b=negOut, out=ltOReqzero);
    Not(in=ltOReqzero, out=isPositive);

    And(a=negOut, b=instruction[2], out=JLT); 
    And(a=zroOut, b=instruction[1], out=JEQ);    
    And(a=isPositive, b=instruction[0], out=JGT);

    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=setJUMP);

    /* Only jump in C-Instructions */
    And(a = setJUMP, b = instruction[15], out = loadPC);

    PC(in = ARegisterOut, inc = true, load = loadPC, reset = reset, out[0..14] = pc);
}
